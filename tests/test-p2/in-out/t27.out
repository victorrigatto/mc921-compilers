Program:
    FuncDef:
        Type: int @ 2:1
        Decl: ID(name=main)
            FuncDecl:
                VarDecl:
                    Type: int @ 2:1
        Compound: @ 2:12
            Decl: ID(name=n)
                VarDecl:
                    Type: int @ 3:5
            Decl: ID(name=i)
                VarDecl:
                    Type: int @ 3:5
            Decl: ID(name=num)
                ArrayDecl:
                    VarDecl:
                        Type: int @ 4:5
                    Constant: int, 100 @ 4:13
            Decl: ID(name=sum)
                VarDecl:
                    Type: int @ 4:5
                Constant: int, 0 @ 4:25
            Decl: ID(name=avg)
                VarDecl:
                    Type: int @ 4:5
            Print: @ 6:5
                Constant: string, Enter the numbers of elements:  @ 6:11
            Read: @ 7:5
                ID: n @ 7:10
            While: @ 9:5
                BinaryOp: || @ 9:12
                    BinaryOp: > @ 9:12
                        ID: n @ 9:12
                        Constant: int, 100 @ 9:16
                    BinaryOp: < @ 9:23
                        ID: n @ 9:23
                        Constant: int, 1 @ 9:27
                Compound: @ 9:30
                    Print: @ 10:9
                        Constant: string, Error! number should in range of (1 to 100).\n @ 10:15
                    Print: @ 11:9
                        Constant: string, Enter the number again:  @ 11:15
                    Read: @ 12:9
                        ID: n @ 12:14
            For: @ 15:5
                Assignment: = @ 15:10
                    ID: i @ 15:10
                    Constant: int, 0 @ 15:14
                BinaryOp: < @ 15:17
                    ID: i @ 15:17
                    ID: n @ 15:21
                Assignment: = @ 15:24
                    ID: i @ 15:24
                    BinaryOp: + @ 15:26
                        ID: i @ 15:26
                        Constant: int, 1 @ 15:28
                Compound: @ 15:31
                    Print: @ 16:9
                        ExprList: @ 16:15
                            BinaryOp: + @ 16:15
                                ID: i @ 16:15
                                Constant: int, 1 @ 16:19
                            Constant: string, Enter number:  @ 16:22
                    Read: @ 17:9
                        ArrayRef: @ 17:14
                            ID: num @ 17:14
                            ID: i @ 17:18
                    Assignment: = @ 18:9
                        ID: sum @ 18:9
                        BinaryOp: + @ 18:15
                            ID: sum @ 18:15
                            ArrayRef: @ 18:21
                                ID: num @ 18:21
                                ID: i @ 18:25
            Assignment: = @ 21:5
                ID: avg @ 21:5
                BinaryOp: / @ 21:11
                    ID: sum @ 21:11
                    ID: n @ 21:17
            Print: @ 22:5
                ExprList: @ 22:11
                    Constant: string, Average =  @ 22:11
                    ID: avg @ 22:25
            Return: @ 23:5
                Constant: int, 0 @ 23:12
